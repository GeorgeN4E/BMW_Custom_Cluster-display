import math

# Original 55x55 bitmap data (truncated for brevity)
original_bytes = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xc0, 
	0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 
	0x00, 0x00, 0x1f, 0x80, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 
	0xf0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x03, 0x80, 0x00, 
	0x00, 0x0f, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 
	0x80, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x1c, 0x00, 0x03, 0x00, 0x00, 0xe0, 0x00, 
	0x18, 0x00, 0x3f, 0xf0, 0x00, 0x60, 0x00, 0x38, 0x00, 0x7f, 0xf8, 0x00, 0x70, 0x00, 0x30, 0x01, 
	0xe3, 0x1e, 0x00, 0x30, 0x00, 0x70, 0x03, 0x83, 0x07, 0x00, 0x38, 0x00, 0x60, 0x07, 0x03, 0x03, 
	0x80, 0x18, 0x00, 0x60, 0x06, 0x03, 0x03, 0x80, 0x18, 0x00, 0x60, 0x0f, 0x83, 0x07, 0xc0, 0x1c, 
	0x00, 0xe0, 0x0f, 0xe3, 0x0f, 0xc0, 0x1c, 0x00, 0xc0, 0x0c, 0xff, 0xfc, 0xe0, 0x0c, 0x00, 0xc0, 
	0x1c, 0x3f, 0xf0, 0xe0, 0x0c, 0x00, 0xc0, 0x18, 0x1c, 0xe0, 0x60, 0x0c, 0x00, 0xc0, 0x18, 0x1c, 
	0xe0, 0x60, 0x0c, 0x00, 0xc0, 0x18, 0x1c, 0xe0, 0x60, 0x0c, 0x00, 0xc0, 0x1c, 0x7f, 0xf8, 0xe0, 
	0x0c, 0x00, 0xc6, 0x0d, 0xf7, 0xbe, 0xc0, 0x0c, 0x00, 0xe4, 0x0f, 0xc3, 0x0f, 0xc0, 0x1c, 0x00, 
	0x60, 0x0f, 0x03, 0x03, 0xc0, 0x18, 0x00, 0x63, 0x07, 0x03, 0x03, 0x80, 0x3c, 0xfe, 0x63, 0x03, 
	0x83, 0x03, 0x19, 0xff, 0xfe, 0x33, 0x83, 0xc3, 0x0e, 0x08, 0xff, 0xee, 0x31, 0x80, 0xf3, 0x3c, 
	0x00, 0x00, 0xe6, 0x39, 0xc0, 0x7f, 0xf8, 0x00, 0x00, 0xe6, 0x18, 0xe0, 0x1f, 0xe0, 0x00, 0x00, 
	0xe6, 0x1c, 0x70, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0e, 0x38, 0x00, 0x00, 0x00, 0x00, 0x66, 0x07, 
	0x1c, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x03, 0x8f, 0x80, 0x00, 0x00, 0x00, 0x66, 0x01, 0xc3, 0xf0, 
	0x00, 0x00, 0x00, 0xe6, 0x00, 0xe0, 0xf8, 0x00, 0x00, 0x00, 0xe6, 0x00, 0x78, 0x30, 0x00, 0x00, 
	0x00, 0xe6, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0xe6, 
	0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00
]

def bytes_to_bitmap(bytes_list, width, height, bytes_per_row):
    bitmap = []
    for y in range(height):
        row = []
        byte_offset = y * bytes_per_row
        for byte in bytes_list[byte_offset:byte_offset + bytes_per_row]:
            for i in reversed(range(8)):  # MSB first
                row.append((byte >> i) & 1)
        bitmap.append(row[:width])  # Truncate to actual width
    return bitmap

def scale_bitmap(original, orig_size, new_size):
    scaled = [[0]*new_size for _ in range(new_size)]
    scale_factor = orig_size / new_size
    for y in range(new_size):
        for x in range(new_size):
            # Calculate sample area
            x_start = int(x * scale_factor)
            x_end = int((x + 1) * scale_factor)
            y_start = int(y * scale_factor)
            y_end = int((y + 1) * scale_factor)
            
            # Count lit pixels in area
            total = 0
            for oy in range(y_start, min(y_end, orig_size)):
                for ox in range(x_start, min(x_end, orig_size)):
                    total += original[oy][ox]
            
            # Threshold (50% or more pixels lit)
            area = (x_end - x_start) * (y_end - y_start)
            scaled[y][x] = 1 if total / area >= 0.5 else 0
    return scaled

def bitmap_to_ascii(bitmap):
    return '\n'.join(''.join('#' if pixel else ' ' for pixel in row) for row in bitmap)

# Convert original bytes to bitmap
original_bitmap = bytes_to_bitmap(original_bytes, 55, 55, 7)

# Show original ASCII art
print("Original 55x55:")
print(bitmap_to_ascii(original_bitmap))

# Scale down to 20x20
scaled_bitmap = scale_bitmap(original_bitmap, 55, 40)

# Show scaled ASCII art
print("\nScaled 20x20:")
print(bitmap_to_ascii(scaled_bitmap))

# Convert scaled bitmap back to byte array
scaled_bytes = []
for row in scaled_bitmap:
    byte = 0
    bit_count = 0
    row_bytes = []
    for pixel in row:
        byte = (byte << 1) | pixel
        bit_count += 1
        if bit_count % 8 == 0:
            row_bytes.append(byte)
            byte = 0
    if bit_count % 8 != 0:
        byte <<= (8 - (bit_count % 8))
        row_bytes.append(byte)
    scaled_bytes.extend(row_bytes)

print("\nScaled C array:")
print("const unsigned char scaled_gauge_logo[] PROGMEM = {")
print("    " + ", ".join(f"0x{b:02x}" for b in scaled_bytes))
print("};")